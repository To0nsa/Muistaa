// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ─────────────────────────────────────────────
// ENUMS
// ─────────────────────────────────────────────

enum Category {
  Personal
  Study
  Work
  Health
  Finance
  Family
  Social
  Shopping
  Travel
  Hobby
  Fitness
  Learning
  Project
  Chores
  Admin
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum Channel {
  email
  SMS
  desktop
}

enum RecurrenceType {
  CRON
  INTERVAL
}

enum JobType {
  reminder
  script
}

enum JobStatus {
  pending
  running
  failed
  completed
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum UserType {
  HUMAN
  SERVICE
}

// ─────────────────────────────────────────────
// MODELS
// ─────────────────────────────────────────────

model User {
  id                 String           @id @default(cuid()) // Unique internal ID
  email              String           @unique
  hashedPassword     String? 
  name               String?  
  phoneNumber        String?
  userType           UserType
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  comments           Comment[]
  devices            Device[]
  oauthClients       OAuthClient[]
  projectMemberships ProjectMember[]
  projects           Project[]
  tasks              Task[]
}

model OAuthClient {
  id                 String          @id @default(cuid()) // Unique internal ID
  name               String
  clientId           String          @unique // Public ID provided to clients when requesting tokens 
  clientSecretHash   String
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  ownerId            String          // Foreign key to the owning User (or service account)

  owner              User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  scopes             OAuthScope[]    @relation("ClientScopes")
}

model OAuthScope {
  id        String          @id @default(cuid())
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  clients   OAuthClient[]   @relation("ClientScopes")
}

model RevokedToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  expiresAt DateTime
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id         String   @id @default(uuid())
  deviceId   String   @unique
  userId     String
  os         String
  platform   String
  endpoint   String
  token      String?
  userAgent  String?
  lastSeenAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  note        String?
  userId      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  members     ProjectMember[]
  tasks       Task[]
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id         String      @id @default(uuid())
  projectId  String
  userId     String
  role       ProjectRole
  addedBy    String?
  joinedAt   DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId],    references: [id], onDelete: Cascade)
}

model Task {
  id           String       @id @default(uuid())
  ownerId      String
  projectId    String?
  parentId     String?
  title        String
  description  String?
  note         String?
  category     Category
  priority     Priority
  dueDate      DateTime?
  completed    Boolean
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  owner        User         @relation(fields: [ownerId],   references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent       Task?        @relation("Subtasks", fields: [parentId], references: [id], onDelete: Cascade)
  children     Task[]       @relation("Subtasks")
  tags         Tag[]        @relation("TaskTags")
  reminder     Reminder?
  jobs         Job[]
  comments     Comment[]
  attachments  Attachment[]
}

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique

  tasks Task[]   @relation("TaskTags")
}

model Reminder {
  id              String         @id @default(uuid())
  taskId          String         @unique
  schedule        String
  recurrenceType  RecurrenceType
  interval        String?
  startAt         DateTime?
  endAt           DateTime?
  timezone        String?
  channel         Channel
  lastTriggeredAt DateTime?
  nextTriggeredAt DateTime?
  note            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  task            Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  notifications   Notification[]
}

model Job {
  id         String    @id @default(uuid())
  type       JobType
  params     Json
  status     JobStatus
  lastRunAt  DateTime
  nextRunAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  taskId     String?

  task       Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Notification {
  id            String             @id @default(uuid())
  recipient     String
  channel       Channel
  status        NotificationStatus
  payload       Json?
  errorMessage  String?
  sentAt        DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  reminderId    String?
  jobId         String?

  reminder      Reminder?          @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  job           Job?               @relation(fields: [jobId],      references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  authorId  String

  task      Task     @relation(fields: [taskId],   references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  entity    String
  recordId  String
  userId    String?
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
